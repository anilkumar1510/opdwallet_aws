name: Deploy with Base64 SSH

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push images
      run: |
        # Build and push API
        docker build -f api/Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/opdwallet/api:latest ./api
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/api:latest

        # Build and push Admin
        docker build -f web-admin/Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest ./web-admin
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest

        # Build and push Member
        docker build -f web-member/Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest ./web-member
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest

    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_SSH_KEY_BASE64: ${{ secrets.EC2_SSH_KEY_BASE64 }}
      run: |
        # Decode SSH key from base64
        echo "$EC2_SSH_KEY_BASE64" | base64 -d > private_key.pem
        chmod 600 private_key.pem

        # Verify key format
        if ! head -n 1 private_key.pem | grep -q "BEGIN RSA PRIVATE KEY"; then
          echo "Error: Invalid SSH key format"
          exit 1
        fi

        # Test SSH connection
        echo "Testing SSH connection..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i private_key.pem ubuntu@${EC2_HOST} 'echo "SSH connection successful"'

        # Deploy to EC2
        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${EC2_HOST} << 'ENDSSH'
          set -e

          # Login to ECR
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

          # Stop old containers
          docker stop opd-nginx opd-web-member opd-web-admin opd-api 2>/dev/null || true
          docker rm opd-nginx opd-web-member opd-web-admin opd-api 2>/dev/null || true

          # Ensure network exists
          docker network create opdwallet_opd-network 2>/dev/null || true

          # Ensure MongoDB is running
          if ! docker ps | grep -q opd-mongo; then
            docker run -d --name opd-mongo \
              --network opdwallet_opd-network \
              -v mongo-data:/data/db \
              mongo:7.0
          fi

          # Pull latest images
          docker pull ${{ env.ECR_REGISTRY }}/opdwallet/api:latest
          docker pull ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest
          docker pull ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest

          # Get secrets from AWS Secrets Manager
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id opdwallet/production \
            --query SecretString --output text 2>/dev/null || echo '{}')

          JWT_SECRET=$(echo $SECRET_JSON | jq -r '.JWT_SECRET // "default-jwt-secret"')
          COOKIE_SECRET=$(echo $SECRET_JSON | jq -r '.COOKIE_SECRET // "default-cookie-secret"')

          # Start API
          docker run -d --name opd-api \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e USE_SECRETS_MANAGER=true \
            -e MONGODB_URI=mongodb://opd-mongo:27017/opd_wallet \
            -e JWT_SECRET="$JWT_SECRET" \
            -e COOKIE_SECRET="$COOKIE_SECRET" \
            -e COOKIE_SECURE=false \
            -e COOKIE_HTTPONLY=true \
            -e CORS_ORIGIN='*' \
            ${{ env.ECR_REGISTRY }}/opdwallet/api:latest

          # Start Admin Portal
          docker run -d --name opd-web-admin \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e API_URL=http://opd-api:4000/api \
            -e NEXT_PUBLIC_API_URL=http://${EC2_HOST}/api \
            ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest

          # Start Member Portal
          docker run -d --name opd-web-member \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e API_URL=http://opd-api:4000/api \
            -e NEXT_PUBLIC_API_URL=http://${EC2_HOST}/api \
            ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest

          # Ensure nginx config exists
          if [ ! -f /home/ubuntu/nginx.conf ]; then
            cat > /home/ubuntu/nginx.conf << 'EOFNGINX'
          events {
              worker_connections 1024;
          }

          http {
              upstream api {
                  server opd-api:4000;
              }

              upstream admin {
                  server opd-web-admin:3000;
              }

              upstream member {
                  server opd-web-member:3001;
              }

              server {
                  listen 80;
                  server_name _;

                  location /api {
                      proxy_pass http://api;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }

                  location /admin {
                      proxy_pass http://admin;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }

                  location / {
                      proxy_pass http://member;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }

                  location /health {
                      return 200 "OK";
                  }
              }
          }
EOFNGINX
          fi

          # Start nginx
          if ! docker ps | grep -q opd-nginx; then
            docker run -d --name opd-nginx \
              --network opdwallet_opd-network \
              -p 80:80 \
              -v /home/ubuntu/nginx.conf:/etc/nginx/nginx.conf:ro \
              nginx:alpine
          fi

          # Health check
          sleep 10
          echo "=== Deployment Status ==="
          docker ps --format "table {{.Names}}\t{{.Status}}"
          echo ""
          curl -sf http://localhost/health && echo "✅ Health check passed!" || echo "❌ Health check failed"
          echo ""
          echo "Deployment completed successfully!"
ENDSSH

        # Cleanup
        rm -f private_key.pem

    - name: Summary
      run: |
        echo "✅ Deployment completed!"
        echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}"