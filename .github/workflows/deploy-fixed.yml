name: Fixed Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com
  EC2_HOST: ${{ secrets.EC2_HOST }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push images
      run: |
        # Build and push API
        docker build -f api/Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/opdwallet/api:latest ./api
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/api:latest

        # Build and push Admin
        docker build -f web-admin/Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest ./web-admin
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest

        # Build and push Member
        docker build -f web-member/Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest ./web-member
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest

    - name: Deploy to EC2
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
      run: |
        # Create SSH key file from secret with proper format
        echo "$EC2_SSH_KEY" | sed 's/\\n/\n/g' > ec2-key.pem
        chmod 600 ec2-key.pem

        # Verify key format
        head -n 1 ec2-key.pem | grep -q "BEGIN RSA PRIVATE KEY" || { echo "Invalid key format"; exit 1; }

        # Deploy using SSH
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2-key.pem ubuntu@${EC2_HOST} << 'ENDSSH'
          set -e

          # Login to ECR
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

          # Stop old containers
          docker stop opd-nginx opd-web-member opd-web-admin opd-api 2>/dev/null || true
          docker rm opd-nginx opd-web-member opd-web-admin opd-api 2>/dev/null || true

          # Create network if not exists
          docker network create opdwallet_opd-network 2>/dev/null || true

          # Start MongoDB if not running
          if ! docker ps | grep -q opd-mongo; then
            docker run -d --name opd-mongo \
              --network opdwallet_opd-network \
              -v mongo-data:/data/db \
              mongo:7.0
          fi

          # Pull latest images
          docker pull $ECR_REGISTRY/opdwallet/api:latest
          docker pull $ECR_REGISTRY/opdwallet/web-admin:latest
          docker pull $ECR_REGISTRY/opdwallet/web-member:latest

          # Start API
          docker run -d --name opd-api \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e MONGODB_URI=mongodb://opd-mongo:27017/opd_wallet \
            -e JWT_SECRET=your-super-secret-jwt-key-change-in-production \
            -e COOKIE_SECURE=false \
            -e COOKIE_HTTPONLY=true \
            -e CORS_ORIGIN='*' \
            $ECR_REGISTRY/opdwallet/api:latest

          # Start Admin Portal
          docker run -d --name opd-web-admin \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e API_URL=http://opd-api:4000/api \
            -e NEXT_PUBLIC_API_URL=http://${EC2_HOST}/api \
            $ECR_REGISTRY/opdwallet/web-admin:latest

          # Start Member Portal
          docker run -d --name opd-web-member \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e API_URL=http://opd-api:4000/api \
            -e NEXT_PUBLIC_API_URL=http://${EC2_HOST}/api \
            $ECR_REGISTRY/opdwallet/web-member:latest

          # Create nginx config if not exists
          cat > /tmp/nginx.conf << 'EOFNGINX'
          events {
              worker_connections 1024;
          }

          http {
              upstream api {
                  server opd-api:4000;
              }

              upstream admin {
                  server opd-web-admin:3000;
              }

              upstream member {
                  server opd-web-member:3001;
              }

              server {
                  listen 80;
                  server_name _;

                  location /api {
                      proxy_pass http://api;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location /admin {
                      proxy_pass http://admin;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location / {
                      proxy_pass http://member;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }

                  location /health {
                      return 200 "OK";
                  }
              }
          }
EOFNGINX

          # Start nginx
          docker run -d --name opd-nginx \
            --network opdwallet_opd-network \
            -p 80:80 \
            -v /tmp/nginx.conf:/etc/nginx/nginx.conf:ro \
            nginx:alpine

          # Wait and check
          sleep 10
          echo "=== Deployment Status ==="
          docker ps
          echo ""
          echo "=== Health Check ==="
          curl -f http://localhost/health && echo " - Health check passed" || echo " - Health check failed"
          echo ""
          echo "Deployment completed!"
ENDSSH

        # Cleanup
        rm -f ec2-key.pem