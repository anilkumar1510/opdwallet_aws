name: Deploy with Secrets Manager

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get secrets from AWS Secrets Manager
      id: secrets
      run: |
        SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id opdwallet/production --query SecretString --output text || echo '{}')

        # Export individual secrets as outputs
        echo "jwt_secret=$(echo $SECRET_JSON | jq -r '.JWT_SECRET // empty')" >> $GITHUB_OUTPUT
        echo "mongodb_uri=$(echo $SECRET_JSON | jq -r '.MONGODB_URI // empty')" >> $GITHUB_OUTPUT
        echo "cookie_secret=$(echo $SECRET_JSON | jq -r '.COOKIE_SECRET // empty')" >> $GITHUB_OUTPUT

        # Check if secrets exist
        if [ -z "$(echo $SECRET_JSON | jq -r '.JWT_SECRET // empty')" ]; then
          echo "Warning: No secrets found in AWS Secrets Manager, using defaults"
        fi

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker images
      run: |
        # Build with production secrets baked in (for demonstration)
        docker build -f api/Dockerfile.prod \
          --build-arg USE_SECRETS_MANAGER=true \
          -t ${{ env.ECR_REGISTRY }}/opdwallet/api:latest \
          -t ${{ env.ECR_REGISTRY }}/opdwallet/api:${{ github.sha }} \
          ./api

        docker build -f web-admin/Dockerfile.prod \
          -t ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest \
          -t ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:${{ github.sha }} \
          ./web-admin

        docker build -f web-member/Dockerfile.prod \
          -t ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest \
          -t ${{ env.ECR_REGISTRY }}/opdwallet/web-member:${{ github.sha }} \
          ./web-member

        # Push all images
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/api:latest
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/api:${{ github.sha }}
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:${{ github.sha }}
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-member:${{ github.sha }}

    - name: Deploy to EC2 with Secrets
      env:
        JWT_SECRET: ${{ steps.secrets.outputs.jwt_secret }}
        MONGODB_URI: ${{ steps.secrets.outputs.mongodb_uri }}
        COOKIE_SECRET: ${{ steps.secrets.outputs.cookie_secret }}
      run: |
        # Save SSH key
        echo "${{ secrets.EC2_SSH_KEY }}" | sed 's/\\n/\n/g' > ec2-key.pem
        chmod 600 ec2-key.pem

        # Deploy with secrets
        ssh -o StrictHostKeyChecking=no -i ec2-key.pem ubuntu@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e

          # Login to ECR
          aws ecr get-login-password --region eu-north-1 | \
            docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

          # Fetch secrets from AWS Secrets Manager
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id opdwallet/production \
            --query SecretString --output text 2>/dev/null || echo '{}')

          # Parse secrets
          export JWT_SECRET=$(echo $SECRET_JSON | jq -r '.JWT_SECRET // "default-jwt-secret"')
          export MONGODB_URI=$(echo $SECRET_JSON | jq -r '.MONGODB_URI // "mongodb://opd-mongo:27017/opd_wallet"')
          export COOKIE_SECRET=$(echo $SECRET_JSON | jq -r '.COOKIE_SECRET // "default-cookie-secret"')
          export SESSION_SECRET=$(echo $SECRET_JSON | jq -r '.SESSION_SECRET // "default-session-secret"')

          # Pull latest images
          docker pull ${{ env.ECR_REGISTRY }}/opdwallet/api:latest
          docker pull ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest
          docker pull ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest

          # Stop and remove old containers
          docker stop opd-api opd-web-admin opd-web-member 2>/dev/null || true
          docker rm opd-api opd-web-admin opd-web-member 2>/dev/null || true

          # Ensure network exists
          docker network create opdwallet_opd-network 2>/dev/null || true

          # Start MongoDB if not running
          if ! docker ps | grep -q opd-mongo; then
            docker run -d --name opd-mongo \
              --network opdwallet_opd-network \
              -v mongo-data:/data/db \
              mongo:7.0
          fi

          # Start API with secrets
          docker run -d --name opd-api \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e USE_SECRETS_MANAGER=true \
            -e AWS_DEFAULT_REGION=eu-north-1 \
            -e MONGODB_URI="$MONGODB_URI" \
            -e JWT_SECRET="$JWT_SECRET" \
            -e COOKIE_SECRET="$COOKIE_SECRET" \
            -e SESSION_SECRET="$SESSION_SECRET" \
            -e COOKIE_SECURE=false \
            -e COOKIE_HTTPONLY=true \
            -e CORS_ORIGIN='*' \
            ${{ env.ECR_REGISTRY }}/opdwallet/api:latest

          # Start Admin Portal
          docker run -d --name opd-web-admin \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e API_URL=http://opd-api:4000/api \
            -e NEXT_PUBLIC_API_URL=http://${{ secrets.EC2_HOST }}/api \
            ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest

          # Start Member Portal
          docker run -d --name opd-web-member \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e API_URL=http://opd-api:4000/api \
            -e NEXT_PUBLIC_API_URL=http://${{ secrets.EC2_HOST }}/api \
            ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest

          # Health check
          sleep 10
          echo "=== Deployment Status ==="
          docker ps --format "table {{.Names}}\t{{.Status}}"
          echo ""
          curl -sf http://localhost/health && echo "‚úÖ Health check passed" || echo "‚ö†Ô∏è Health check failed"
ENDSSH

        # Cleanup
        rm -f ec2-key.pem

    - name: Deployment Summary
      run: |
        echo "==================================="
        echo "üöÄ DEPLOYMENT WITH SECRETS COMPLETE"
        echo "==================================="
        echo ""
        echo "‚úÖ Images pushed to ECR:"
        echo "   - API: ${{ env.ECR_REGISTRY }}/opdwallet/api:${{ github.sha }}"
        echo "   - Admin: ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:${{ github.sha }}"
        echo "   - Member: ${{ env.ECR_REGISTRY }}/opdwallet/web-member:${{ github.sha }}"
        echo ""
        echo "üîê Secrets Manager: opdwallet/production"
        echo "üåê Application URL: http://${{ secrets.EC2_HOST }}"
        echo ""
        echo "üìù To view logs:"
        echo "   ssh ubuntu@${{ secrets.EC2_HOST }} docker logs opd-api"