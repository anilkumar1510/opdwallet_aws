name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          command_timeout: 55m
          script: |
            echo "üöÄ Starting deployment..."

            # Ensure we're in the right directory
            if [ -d ~/opdwallet_aws ]; then
              cd ~/opdwallet_aws
              echo "üì• Pulling latest code..."
              git pull origin main || git reset --hard origin/main
            else
              echo "üìÅ Cloning repository..."
              cd ~
              git clone https://github.com/anilkumar1510/opdwallet_aws.git
              cd opdwallet_aws
            fi

            # Ensure deployment script is executable
            chmod +x deploy-production.sh deploy-on-aws.sh scripts/cleanup-containers.sh 2>/dev/null || true

            # Run comprehensive cleanup to prevent port conflicts
            echo "üßπ Running container cleanup to prevent port conflicts..."
            ./scripts/cleanup-containers.sh || echo "‚ö†Ô∏è Cleanup script not found, proceeding with manual cleanup"

            # Manual fallback cleanup if script fails
            echo "üõë Stopping any existing OPD containers..."
            docker stop $(docker ps -q --filter name="opd-") 2>/dev/null || true
            docker rm $(docker ps -aq --filter name="opd-") 2>/dev/null || true

            # Detect port conflicts before deployment
            echo "üîç Checking for port conflicts on 4000, 3001, 3002..."
            CONFLICTS=$(netstat -tuln 2>/dev/null | grep -E ":(4000|3001|3002|80|443) " || true)
            if [ ! -z "$CONFLICTS" ]; then
              echo "‚ö†Ô∏è Warning: Found services using deployment ports:"
              echo "$CONFLICTS"
              echo "üîÑ Attempting to resolve conflicts..."

              # Kill processes using our ports
              sudo fuser -k 4000/tcp 2>/dev/null || true
              sudo fuser -k 3001/tcp 2>/dev/null || true
              sudo fuser -k 3002/tcp 2>/dev/null || true
              sudo fuser -k 80/tcp 2>/dev/null || true
              sudo fuser -k 443/tcp 2>/dev/null || true

              sleep 5
            else
              echo "‚úÖ No port conflicts detected"
            fi

            # Clean up Docker to free memory
            docker system prune -af --volumes 2>/dev/null || true

            # Ensure we're in the project directory
            cd ~/opdwallet_aws || { echo "‚ùå ERROR: Cannot access opdwallet_aws directory"; exit 1; }

            # Setup environment variables - Docker Compose needs .env file
            echo "üìù Setting up environment variables..."
            if [ -f .env.production ]; then
              cp .env.production .env
              echo "‚úÖ Environment variables configured from .env.production"
            else
              echo "‚ùå ERROR: .env.production file not found"
              exit 1
            fi

            # Pre-pull critical images to avoid Docker Hub 503 errors during compose
            echo "üì¶ Pre-pulling critical Docker images..."
            docker pull nginx:alpine 2>/dev/null || echo "‚ö†Ô∏è Warning: Failed to pre-pull nginx:alpine, will retry during compose"
            docker pull mongo:7.0 2>/dev/null || echo "‚ö†Ô∏è Warning: Failed to pre-pull mongo:7.0, will retry during compose"
            docker pull node:20-alpine 2>/dev/null || echo "‚ö†Ô∏è Warning: Failed to pre-pull node:20-alpine, will retry during compose"

            # Build and run with retry mechanism for Docker Hub intermittent issues
            echo "üî® Building and starting services..."
            MAX_RETRIES=3
            RETRY_COUNT=0

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if docker-compose -f docker-compose.prod.yml up -d --build --remove-orphans; then
                echo "‚úÖ Docker-compose succeeded"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  WAIT_TIME=$((RETRY_COUNT * 10))
                  echo "‚ö†Ô∏è Docker-compose failed (attempt $RETRY_COUNT/$MAX_RETRIES), retrying in ${WAIT_TIME}s..."
                  sleep $WAIT_TIME
                else
                  echo "‚ùå ERROR: Docker-compose failed after $MAX_RETRIES attempts"
                  exit 1
                fi
              fi
            done

            # Wait for services
            sleep 30

            # Verify no port conflicts after deployment
            echo "üîç Post-deployment port conflict check..."
            CONFLICTS_POST=$(docker ps --format "table {{.Names}}\t{{.Ports}}" | grep -E ":4000.*:4000" | wc -l || echo "0")
            if [ "$CONFLICTS_POST" -gt 1 ]; then
              echo "‚ùå ERROR: Multiple containers detected on port 4000!"
              docker ps --format "table {{.Names}}\t{{.Ports}}" | grep ":4000"
              exit 1
            else
              echo "‚úÖ No port 4000 conflicts detected"
            fi

            # Check status
            echo "üìä Deployment status:"
            docker ps

            # Create admin user if not exists
            echo "üë§ Creating admin user if not exists..."
            docker exec opd-api-prod node -e "
            const bcrypt = require('bcrypt');
            const { MongoClient, ObjectId } = require('mongodb');

            async function createAdmin() {
              const uri = 'mongodb://mongodb:27017/opd_wallet';
              const client = new MongoClient(uri);
              try {
                await client.connect();
                const db = client.db('opd_wallet');
                const users = db.collection('users');

                const existing = await users.findOne({ email: 'admin@opdwallet.com' });
                if (existing) {
                  console.log('‚úÖ Admin user already exists');
                  return;
                }

                const passwordHash = await bcrypt.hash('Admin@123', 12);
                const timestamp = Date.now();

                await users.insertOne({
                  _id: new ObjectId(),
                  userId: \`ADMIN-\${timestamp}\`,
                  uhid: \`UHID-ADMIN-\${timestamp}\`,
                  memberId: \`MEM-ADMIN-\${timestamp}\`,
                  relationship: 'SELF',
                  name: { firstName: 'Super', lastName: 'Administrator', fullName: 'Super Administrator' },
                  email: 'admin@opdwallet.com',
                  phone: '+919999999999',
                  dob: new Date('1990-01-01'),
                  gender: 'MALE',
                  role: 'SUPER_ADMIN',
                  status: 'ACTIVE',
                  passwordHash: passwordHash,
                  mustChangePassword: false,
                  createdAt: new Date(),
                  updatedAt: new Date()
                });

                console.log('‚úÖ Admin user created: admin@opdwallet.com / Admin@123');
              } catch (error) {
                console.error('‚ùå Admin user creation error:', error.message);
              } finally {
                await client.close();
              }
            }

            createAdmin().catch(console.error);
            " 2>&1 || echo "‚ö†Ô∏è Admin user creation skipped (may already exist)"

            # Drop unused 'wallets' collection (one-time cleanup)
            echo "üßπ Dropping unused 'wallets' collection..."
            docker exec opd-mongodb-prod mongosh opd_wallet --quiet --eval "
              var result = db.wallets.drop();
              if (result) {
                print('‚úÖ Dropped unused wallets collection');
              } else {
                print('‚ÑπÔ∏è  wallets collection does not exist or already dropped');
              }
            " 2>&1 || echo "‚ö†Ô∏è Collection cleanup completed"

            echo "‚úÖ Deployment completed successfully"