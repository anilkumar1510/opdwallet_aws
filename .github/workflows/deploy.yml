name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH Key
      id: ssh-setup
      run: |
        # Decode SSH key from base64
        if [ -z "${{ secrets.EC2_SSH_KEY_BASE64 }}" ]; then
          echo "ERROR: EC2_SSH_KEY_BASE64 secret is not set!"
          echo "Please add the base64-encoded SSH key to GitHub Secrets"
          exit 1
        fi

        echo "Decoding SSH key..."
        echo "${{ secrets.EC2_SSH_KEY_BASE64 }}" | base64 -d > private_key.pem
        chmod 600 private_key.pem

        # Verify key format
        if ! head -n 1 private_key.pem | grep -q "BEGIN RSA PRIVATE KEY"; then
          echo "ERROR: Decoded key is not in correct format"
          exit 1
        fi

        # Test SSH connection
        echo "Testing SSH connection to ${{ secrets.EC2_HOST }}..."
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'; then
          echo "‚úÖ SSH setup complete"
        else
          echo "‚ùå SSH connection failed"
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker images
      run: |
        echo "üì¶ Building Docker images for ARM64..."

        # Build all images for ARM64 (matching EC2 ARM instance)
        docker build -f api/Dockerfile.prod -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/api:latest ./api
        docker build -f web-admin/Dockerfile.prod -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-admin:latest ./web-admin
        docker build -f web-member/Dockerfile.prod -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-member:latest ./web-member

        echo "üöÄ Pushing to ECR..."
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/api:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-admin:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-member:latest

    - name: Deploy to EC2
      run: |
        echo "üö¢ Deploying to EC2..."

        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e

          # Login to ECR
          aws ecr get-login-password --region eu-north-1 | \
            docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com

          # Pull latest images from ECR
          echo "Pulling ARM64 images from ECR..."
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/api:latest
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-admin:latest
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-member:latest

          # Stop and remove old containers
          docker stop opd-api opd-web-admin opd-web-member 2>/dev/null || true
          docker rm opd-api opd-web-admin opd-web-member 2>/dev/null || true

          # Ensure network exists
          docker network create opdwallet_opd-network 2>/dev/null || true

          # Ensure MongoDB is running
          if ! docker ps | grep -q opd-mongo; then
            docker run -d --name opd-mongo \
              --network opdwallet_opd-network \
              -v mongo-data:/data/db \
              -p 27017:27017 \
              mongo:7.0
          fi

          # Start API
          docker run -d --name opd-api \
            --network opdwallet_opd-network \
            -p 4000:4000 \
            -e NODE_ENV=production \
            -e MONGODB_URI=mongodb://opd-mongo:27017/opd_wallet \
            -e JWT_SECRET=your-super-secret-jwt-key-change-in-production \
            -e COOKIE_SECURE=false \
            -e COOKIE_HTTPONLY=true \
            -e CORS_ORIGIN='*' \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/api:latest

          # Start Admin Portal
          docker run -d --name opd-web-admin \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e API_URL=http://opd-api:4000/api \
            -e NEXT_PUBLIC_API_URL=http://${{ secrets.EC2_HOST }}/api \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-admin:latest

          # Start Member Portal
          docker run -d --name opd-web-member \
            --network opdwallet_opd-network \
            -e NODE_ENV=production \
            -e API_URL=http://opd-api:4000/api \
            -e NEXT_PUBLIC_API_URL=http://${{ secrets.EC2_HOST }}/api \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-member:latest

          # Ensure nginx is running
          if ! docker ps | grep -q opd-nginx; then
            # Create nginx config if doesn't exist
            if [ ! -f /home/ubuntu/nginx.conf ]; then
              cat > /home/ubuntu/nginx.conf << 'NGINX_CONFIG'
events {
    worker_connections 1024;
}

http {
    upstream api {
        server opd-api:4000;
    }

    upstream admin {
        server opd-web-admin:3000;
    }

    upstream member {
        server opd-web-member:3001;
    }

    server {
        listen 80;
        server_name _;
        client_max_body_size 100M;

        location /api {
            proxy_pass http://api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /admin {
            proxy_pass http://admin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            proxy_pass http://member;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
NGINX_CONFIG
            fi

            docker run -d --name opd-nginx \
              --network opdwallet_opd-network \
              -p 80:80 \
              -v /home/ubuntu/nginx.conf:/etc/nginx/nginx.conf:ro \
              nginx:alpine
          fi

          # Wait for services to start
          echo "Waiting for services to start..."
          sleep 10

          # Health check
          echo ""
          echo "=== Deployment Status ==="
          docker ps --format "table {{.Names}}\t{{.Status}}"
          echo ""

          if curl -sf http://localhost/health > /dev/null; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ö†Ô∏è  Health check failed (services may still be starting)"
          fi

          echo ""
          echo "üéâ Deployment completed successfully!"
ENDSSH

        # Cleanup
        rm -f private_key.pem

    - name: Deployment Summary
      if: always()
      run: |
        echo ""
        echo "======================================"
        echo "       DEPLOYMENT SUMMARY"
        echo "======================================"
        echo ""
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Status: SUCCESS"
          echo ""
          echo "üåê Application URLs:"
          echo "   Main: http://${{ secrets.EC2_HOST }}"
          echo "   Admin: http://${{ secrets.EC2_HOST }}/admin"
          echo "   API Docs: http://${{ secrets.EC2_HOST }}/api/docs"
        else
          echo "‚ùå Status: FAILED"
          echo ""
          echo "Check the logs above for error details."
        fi
        echo ""
        echo "======================================"