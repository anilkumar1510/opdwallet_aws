name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        command_timeout: 20m
        script: |
          echo "üöÄ Starting deployment..."

          # Navigate to project directory
          cd ~/opdwallet || {
            echo "üìÅ Project directory not found, cloning..."
            cd ~
            git clone https://${{ secrets.GH_TOKEN }}@github.com/anilkumar1510/opdwallet.git
            cd opdwallet
          }

          # Pull latest changes
          echo "üì• Pulling latest changes..."
          git pull origin main

          # Create .env.production if not exists
          if [ ! -f .env.production ]; then
            echo "üìù Creating .env.production..."
            cat > .env.production << EOF
          MONGO_DATABASE=opd_wallet
          JWT_SECRET=your-secret-jwt-key-change-in-production
          JWT_EXPIRY=7d
          COOKIE_NAME=opd_session
          COOKIE_SECURE=false
          COOKIE_HTTPONLY=true
          COOKIE_SAMESITE=lax
          COOKIE_MAX_AGE=604800000
          PUBLIC_API_URL=http://51.20.125.246/api
          NODE_ENV=production
          EOF
          fi

          # Stop existing containers gracefully
          echo "üõë Stopping existing containers..."
          docker-compose -f docker-compose.prod.yml down || true

          # Clean up to free space
          echo "üßπ Cleaning Docker system..."
          docker system prune -f

          # Build images one by one to avoid memory issues
          echo "üî® Building Docker images sequentially..."
          export DOCKER_DEFAULT_PLATFORM=linux/amd64

          # Build MongoDB first (just pulls image)
          docker-compose -f docker-compose.prod.yml pull mongodb

          # Build API
          echo "üì¶ Building API..."
          docker-compose --env-file .env.production -f docker-compose.prod.yml build --no-cache api

          # Build Admin Portal
          echo "üì¶ Building Admin Portal..."
          docker-compose --env-file .env.production -f docker-compose.prod.yml build --no-cache web-admin

          # Build Member Portal
          echo "üì¶ Building Member Portal..."
          docker-compose --env-file .env.production -f docker-compose.prod.yml build --no-cache web-member

          # Start all services
          echo "üö¢ Starting all services..."
          docker-compose --env-file .env.production -f docker-compose.prod.yml up -d

          # Wait for services to be ready
          echo "‚è≥ Waiting for services to be ready..."
          sleep 20

          # Seed database if needed
          echo "üå± Seeding database..."
          docker exec opd-api node dist/scripts/seed.js 2>/dev/null || echo "Database already seeded"

          # Health check
          echo "üîç Performing health check..."
          docker-compose -f docker-compose.prod.yml ps

          # Check if services are accessible
          curl -f http://localhost:4000/api/health || echo "API health check endpoint not configured"
          curl -f http://localhost:3002 || echo "Member portal check"
          curl -f http://localhost:3001 || echo "Admin portal check"

          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Application URLs:"
          echo "   Member Portal: http://51.20.125.246"
          echo "   Admin Portal: http://51.20.125.246/admin"
          echo "   API: http://51.20.125.246/api"