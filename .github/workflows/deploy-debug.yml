name: Deploy Debug

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com

jobs:
  debug-deployment:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Debug - Check Secrets
      run: |
        echo "=== DEBUGGING SSH KEY ISSUE ==="
        echo ""
        echo "1. Checking if secrets are set:"
        echo "   EC2_HOST exists: ${{ secrets.EC2_HOST != '' }}"
        echo "   EC2_SSH_KEY exists: ${{ secrets.EC2_SSH_KEY != '' }}"
        echo "   EC2_SSH_KEY_BASE64 exists: ${{ secrets.EC2_SSH_KEY_BASE64 != '' }}"
        echo ""

    - name: Debug - Test Plain Text SSH Key
      if: ${{ secrets.EC2_SSH_KEY != '' }}
      continue-on-error: true
      run: |
        echo "2. Testing plain text SSH key format:"
        echo "${{ secrets.EC2_SSH_KEY }}" > key1.pem
        echo ""
        echo "   Key file size: $(wc -c < key1.pem) bytes"
        echo "   First line: $(head -n 1 key1.pem | cut -c1-30)..."
        echo "   Last line: $(tail -n 1 key1.pem | cut -c1-30)..."
        echo "   Line count: $(wc -l < key1.pem)"
        echo ""

        # Check key format
        if head -n 1 key1.pem | grep -q "BEGIN RSA PRIVATE KEY"; then
          echo "   ✓ Key starts with correct RSA header"
        else
          echo "   ✗ Key does NOT start with RSA header"
          echo "   Actual first 50 chars: $(head -c 50 key1.pem)"
        fi

        # Try to validate key
        chmod 600 key1.pem
        ssh-keygen -y -e -f key1.pem > /dev/null 2>&1 && echo "   ✓ SSH key is valid" || echo "   ✗ SSH key validation failed"

        rm -f key1.pem

    - name: Debug - Test Base64 SSH Key
      if: ${{ secrets.EC2_SSH_KEY_BASE64 != '' }}
      continue-on-error: true
      run: |
        echo "3. Testing base64 SSH key:"
        echo "${{ secrets.EC2_SSH_KEY_BASE64 }}" > key.b64
        echo ""
        echo "   Base64 file size: $(wc -c < key.b64) bytes"
        echo "   Base64 first 50 chars: $(head -c 50 key.b64)"
        echo ""

        # Try to decode
        if base64 -d key.b64 > key2.pem 2>/dev/null; then
          echo "   ✓ Base64 decode successful"
          echo "   Decoded size: $(wc -c < key2.pem) bytes"
          echo "   Decoded lines: $(wc -l < key2.pem)"
          echo "   Decoded first line: $(head -n 1 key2.pem | cut -c1-30)..."

          chmod 600 key2.pem
          ssh-keygen -y -e -f key2.pem > /dev/null 2>&1 && echo "   ✓ Decoded SSH key is valid" || echo "   ✗ Decoded SSH key validation failed"
        else
          echo "   ✗ Base64 decode failed"
        fi

        rm -f key.b64 key2.pem

    - name: Debug - Test with different line ending fixes
      continue-on-error: true
      run: |
        echo "4. Testing different line ending fixes:"

        # Method 1: Direct echo with sed
        echo "${{ secrets.EC2_SSH_KEY }}" | sed 's/\\n/\n/g' > key3.pem
        chmod 600 key3.pem
        echo "   Method 1 (sed): $(ssh-keygen -y -e -f key3.pem > /dev/null 2>&1 && echo '✓ Valid' || echo '✗ Invalid')"

        # Method 2: tr -d '\r'
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > key4.pem
        chmod 600 key4.pem
        echo "   Method 2 (tr): $(ssh-keygen -y -e -f key4.pem > /dev/null 2>&1 && echo '✓ Valid' || echo '✗ Invalid')"

        # Method 3: printf
        printf "%s" "${{ secrets.EC2_SSH_KEY }}" > key5.pem
        chmod 600 key5.pem
        echo "   Method 3 (printf): $(ssh-keygen -y -e -f key5.pem > /dev/null 2>&1 && echo '✓ Valid' || echo '✗ Invalid')"

        rm -f key3.pem key4.pem key5.pem

    - name: Debug - Test SSH Connection with Base64 Key
      if: ${{ secrets.EC2_SSH_KEY_BASE64 != '' && secrets.EC2_HOST != '' }}
      continue-on-error: true
      run: |
        echo "5. Testing actual SSH connection with base64 key:"

        # Decode base64 key
        echo "${{ secrets.EC2_SSH_KEY_BASE64 }}" | base64 -d > ssh_key.pem
        chmod 600 ssh_key.pem

        # Test connection
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -v -i ssh_key.pem ubuntu@${{ secrets.EC2_HOST }} 'echo "SSH connection successful!"' 2>&1 | head -20

        rm -f ssh_key.pem

    - name: Debug - Test SSH with OpenSSH format
      continue-on-error: true
      run: |
        echo "6. Converting and testing with OpenSSH format:"

        # Try to decode and convert
        if [ -n "${{ secrets.EC2_SSH_KEY_BASE64 }}" ]; then
          echo "${{ secrets.EC2_SSH_KEY_BASE64 }}" | base64 -d > rsa_key.pem
          chmod 600 rsa_key.pem

          # Try to convert to OpenSSH format
          if ssh-keygen -p -m PEM -f rsa_key.pem -N "" 2>/dev/null; then
            echo "   ✓ Converted to OpenSSH format"
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i rsa_key.pem ubuntu@${{ secrets.EC2_HOST }} 'echo "Connection with converted key successful!"' || echo "   ✗ Connection still failed"
          else
            echo "   ✗ Conversion failed"
          fi

          rm -f rsa_key.pem
        fi

    - name: Summary
      run: |
        echo ""
        echo "=== DEBUGGING SUMMARY ==="
        echo "Check the output above to identify which format works."
        echo "The issue is likely one of:"
        echo "1. Secret not properly set in GitHub"
        echo "2. Line ending issues (Windows vs Unix)"
        echo "3. Base64 encoding/decoding problems"
        echo "4. SSH key format (RSA vs OpenSSH)"
        echo ""
        echo "Once identified, we'll update the deploy-base64.yml workflow with the working method."