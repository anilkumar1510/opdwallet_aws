name: Simple Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push images
      run: |
        # Build and push API
        docker build -f api/Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/opdwallet/api:latest ./api
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/api:latest

        # Build and push Admin
        docker build -f web-admin/Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest ./web-admin
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest

        # Build and push Member
        docker build -f web-member/Dockerfile.prod -t ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest ./web-member
        docker push ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest

    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        # Login to ECR
        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

        # Stop and remove old containers
        docker stop opd-nginx opd-web-member opd-web-admin opd-api || true
        docker rm opd-nginx opd-web-member opd-web-admin opd-api || true

        # Ensure network exists
        docker network create opdwallet_opd-network 2>/dev/null || true

        # Start MongoDB if not running
        docker ps | grep opd-mongo || docker run -d --name opd-mongo --network opdwallet_opd-network -v mongo-data:/data/db mongo:7.0

        # Pull and run new containers
        docker pull ${{ env.ECR_REGISTRY }}/opdwallet/api:latest
        docker run -d --name opd-api \
          --network opdwallet_opd-network \
          -e NODE_ENV=development \
          -e MONGODB_URI=mongodb://opd-mongo:27017/opd_wallet \
          -e JWT_SECRET=your-super-secret-jwt-key-change-in-production \
          -e COOKIE_SECURE=false \
          -e COOKIE_HTTPONLY=true \
          -e CORS_ORIGIN='*' \
          ${{ env.ECR_REGISTRY }}/opdwallet/api:latest

        docker pull ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest
        docker run -d --name opd-web-admin \
          --network opdwallet_opd-network \
          -e NODE_ENV=development \
          -e API_URL=http://api:4000/api \
          -e NEXT_PUBLIC_API_URL=http://${{ secrets.EC2_HOST }}/api \
          ${{ env.ECR_REGISTRY }}/opdwallet/web-admin:latest

        docker pull ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest
        docker run -d --name opd-web-member \
          --network opdwallet_opd-network \
          -e NODE_ENV=development \
          -e API_URL=http://api:4000/api \
          -e NEXT_PUBLIC_API_URL=http://${{ secrets.EC2_HOST }}/api \
          ${{ env.ECR_REGISTRY }}/opdwallet/web-member:latest

        # Start nginx
        docker run -d --name opd-nginx \
          --network opdwallet_opd-network \
          -p 80:80 \
          -v /home/ubuntu/opdwallet/nginx.conf:/etc/nginx/nginx.conf:ro \
          nginx:alpine

        # Health check
        sleep 10
        curl -f http://localhost/health && echo "Deployment successful!" || echo "Health check failed"
        docker ps
        EOF

    - name: Deploy to EC2
      run: |
        # Save SSH key
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key
        chmod 600 private_key

        # Copy deployment script
        scp -o StrictHostKeyChecking=no -i private_key deploy.sh ubuntu@${{ secrets.EC2_HOST }}:/tmp/

        # Execute deployment
        ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ secrets.EC2_HOST }} 'bash /tmp/deploy.sh'

        # Cleanup
        rm -f private_key deploy.sh