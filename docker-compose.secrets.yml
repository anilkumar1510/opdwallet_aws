version: '3.8'

# Docker Compose configuration using AWS Secrets Manager
# This requires the EC2 instance to have IAM role with secrets access

services:
  # Secrets fetcher - initializes environment from AWS Secrets Manager
  secrets-init:
    image: amazon/aws-cli:latest
    container_name: opd-secrets-init
    environment:
      AWS_DEFAULT_REGION: eu-north-1
      SECRET_NAME: opdwallet/production
    volumes:
      - ./secrets:/secrets
    command: |
      sh -c "
        aws secretsmanager get-secret-value --secret-id opdwallet/production --query SecretString --output text > /secrets/env.json
        echo 'Secrets fetched successfully'
      "
    networks:
      - opd-network

  # MongoDB with authentication
  mongodb:
    image: mongo:7.0
    container_name: opd-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_user
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_password
      MONGO_INITDB_DATABASE: opd_wallet
    volumes:
      - mongo-data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    secrets:
      - mongo_user
      - mongo_password
    networks:
      - opd-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for session management
  redis:
    image: redis:7-alpine
    container_name: opd-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis-data:/data
    networks:
      - opd-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # NestJS API with Secrets Manager
  api:
    image: 695990114347.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/api:latest
    container_name: opd-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      USE_SECRETS_MANAGER: "true"
      AWS_DEFAULT_REGION: eu-north-1
      PORT: 4000
    depends_on:
      - mongodb
      - redis
      - secrets-init
    volumes:
      - ./secrets:/secrets:ro
    networks:
      - opd-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Portal
  web-admin:
    image: 695990114347.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-admin:latest
    container_name: opd-web-admin
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_URL: http://api:4000/api
      NEXT_PUBLIC_API_URL: ${PUBLIC_API_URL:-http://13.60.210.156/api}
    depends_on:
      - api
    networks:
      - opd-network

  # Member Portal
  web-member:
    image: 695990114347.dkr.ecr.eu-north-1.amazonaws.com/opdwallet/web-member:latest
    container_name: opd-web-member
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_URL: http://api:4000/api
      NEXT_PUBLIC_API_URL: ${PUBLIC_API_URL:-http://13.60.210.156/api}
    depends_on:
      - api
    networks:
      - opd-network

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: opd-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - web-admin
      - web-member
    restart: unless-stopped
    networks:
      - opd-network

networks:
  opd-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local

secrets:
  mongo_user:
    external: true
    external_name: opdwallet_mongo_user
  mongo_password:
    external: true
    external_name: opdwallet_mongo_password