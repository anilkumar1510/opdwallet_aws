# Production Dockerfile for Doctor Portal
FROM node:20-alpine AS deps
# Add libc6-compat for ARM64 compatibility
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY package*.json ./
RUN npm ci

# Builder stage
FROM node:20-alpine AS builder
# Add libc6-compat for ARM64 compatibility
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Use production ESLint config (more lenient)
RUN if [ -f .eslintrc.production.json ]; then \
    mv .eslintrc.json .eslintrc.original.json && \
    mv .eslintrc.production.json .eslintrc.json; \
    fi

# Build arguments for client-side env vars
ARG NEXT_PUBLIC_API_URL=http://51.21.190.63:4000/api
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS runner
# Add libc6-compat for ARM64 compatibility
RUN apk add --no-cache libc6-compat
WORKDIR /app

ENV NODE_ENV production

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy necessary files
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json

# Copy standalone build
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000

CMD ["node", "server.js"]
